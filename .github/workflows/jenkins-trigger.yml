name: Trigger Jenkins Job and Retrieve Output on "/runtests" Comment

on:
  issue_comment:
    types:
      - created
  pull_request:
    types:
      - opened 

jobs:
  trigger-jenkins-job:
    runs-on: ubuntu-latest

    steps:
      - name: Check Comment Content
        id: comment
        run: echo "::set-output name=content::$(jq -r '.comment.body' $GITHUB_EVENT_PATH)"


      - name: Trigger Jenkins Job
        if: ${{ steps.comment.outputs.content == '/runtests' || github.event_name == 'pull_request' }}
        run: |
          set -x
          # Construct the Jenkins job's build trigger URL using the secret
          JENKINS_JOB_URL="${{ secrets.JENKINS_SERVER_URL }}/job/jenkins-test/build?token=jenkinstest"

          
          # Trigger the Jenkins job using curl with username and API token
          RESPONSE=$(curl -k -X POST -s -i -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" "${JENKINS_JOB_URL}")

          # Extract the build URL from the response headers
          BUILD_URL=$(echo "$RESPONSE" | grep -oP "Location: \K(.*)" | tr -d '\r')

          # Extract the build number from the BUILD_URL
          BUILD_NUMBER=$(basename "$BUILD_URL" | tr -d '/')

          # Poll the Jenkins queue API to check if the job has started
          while [ "$(curl -k -s "${{ secrets.JENKINS_SERVER_URL }}/queue/item/${BUILD_NUMBER}/api/json" -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" | jq -r '.executable.number')" == "null" ]; do
              echo "Job is waiting in the queue..."
              sleep 10
          done

          # Retrieve the build URL once the job has started
          curl -k -s "${{ secrets.JENKINS_SERVER_URL }}/queue/item/${BUILD_NUMBER}/api/json" -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" | jq
          BUILD_NUMBER=$(curl -k -s "${{ secrets.JENKINS_SERVER_URL }}/queue/item/${BUILD_NUMBER}/api/json" -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" | jq -r '.executable.number')
          echo "BUILD_NUMBER=${BUILD_NUMBER}" >> $GITHUB_ENV

          # Poll the Jenkins API to check if the build has completed
          while [ "$(curl -k -s "${{ secrets.JENKINS_SERVER_URL }}/job/jenkins-test/${BUILD_NUMBER}/api/json" -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" | jq -r '.building')" == "true" ]; do
              echo "Build in progress..."
              sleep 10
          done
          
          # Retrieve the console output of the Jenkins job
          CONSOLE_OUTPUT=$(curl -k -s "${{ secrets.JENKINS_SERVER_URL }}/job/jenkins-test/${BUILD_NUMBER}/consoleText" -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}")
          echo $CONSOLE_OUTPUT
          echo "CONSOLE_OUTPUT=${CONSOLE_OUTPUT}" >> $GITHUB_ENV

      - name: Set Build Status Check
        if: always()  # This step will always run
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.MY_TOKEN }}
          script: |
            const output = `
            Build Number: ${BUILD_NUMBER}
            \`\`\`
            ${CONSOLE_OUTPUT}
            \`\`\`
            `;
            github.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Jenkins Build Status',
              head_sha: context.sha,
              status: 'completed',
              conclusion: 'success',
              output: {
                title: 'Jenkins Build Status',
                summary: 'Jenkins build completed successfully.',
                text: output,
              },
            });

